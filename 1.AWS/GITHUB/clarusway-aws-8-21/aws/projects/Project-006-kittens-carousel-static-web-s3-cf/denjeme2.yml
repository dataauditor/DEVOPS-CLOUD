AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static website hosting with S3 and CloudFront with a custom domain.'
Parameters:
  Domain:
    Description: 'The domain of your website.'
    Type: String
  HostedZoneID:
    Description: 'The ID of your hosted zone in Route 53'
    Type: 'AWS::Route53::HostedZone::Id'
  CreateCert:
    Description: 'Whether to create an HTTPS certificate for this site. You MUST create this stack in the us-east-1 (N. Virginia) region when creating a certificate'
    Type: String
    AllowedValues:
    - 'Yes'
    - 'No'
    Default: 'Yes'
  IndexDocument:
    Description: 'Directory index filename'
    Type: String
    Default: 'index.html'
  #LogsRetentionInDays:
  #  Description: 'Specifies the number of days you want to retain log events'
  #  Type: Number
  #  Default: 14
  #  AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Conditions:
  ShouldCreateCert: !Equals
  - !Ref CreateCert
  - 'Yes'
Resources:
  # Create the bucket to contain the website HTML
  S3Bucket:
    Type: 'AWS::S3::Bucket'
  # Create a CloudFront Access Identity to broker access to the bucket
  #CloudFrontOriginAccessIdentity:
  #  Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
  #  Properties:
  #    CloudFrontOriginAccessIdentityConfig:
  #      Comment: !Ref S3Bucket
  ReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          #Principal:
          #  CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
  # Configure the bucket as a CloudFront Origin and grant access via the access identity
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref Domain
        ViewerCertificate:
          AcmCertificateArn: !Ref Cert
          SslSupportMethod: 'vip'
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: !If
          - ShouldCreateCert
          - 'redirect-to-https'
          - 'allow-all'
        DefaultRootObject: ''
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !GetAtt 'S3Bucket.DomainName'
          Id: s3origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
  # Lambda@Edge function to handle doc root stuff
  # Set up A Record via Route 53
  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneID
      Name: !Ref Domain
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # This Zone ID is used for any CloudFront Distribution
        DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
  # Set up TLS Cert
  Cert:
    Condition: ShouldCreateCert
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref Domain
      ValidationMethod: DNS
  # Create an IAM user with Access Keys to enable automated deployment of the website to this bucket
  PublishUser:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
        - PolicyName: !Sub 'publish-to-${S3Bucket}'
          PolicyDocument:
            Statement:
            - Action: 's3:*'
              Effect: Allow
              Resource: 
              - !Sub 'arn:aws:s3:::${S3Bucket}'
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'
Outputs:
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket
  PublishUser:
    Description: 'IAM User with write access to the bucket'
    Value: !Ref PublishUser
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  URL:
    Description: 'URL of your website'
    Value: !If
    - ShouldCreateCert
    - !Sub 'https://${Domain}'
    - !Sub 'http://${Domain}'