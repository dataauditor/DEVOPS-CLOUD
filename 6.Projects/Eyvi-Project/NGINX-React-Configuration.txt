1.NGINX ILE 80 PORTUNDAN CIKIS.

a.Install Node.js, npm, NGINX:
sudo su
sudo apt update

curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
sudo apt install nodejs
node -v
npm -v

sudo apt install nginx
nginx -v
service nginx status (systemctl enable nginx)
  - nginx'in calistigi gorulur.
service nginx start (systemctl status nginx)
  - stopta ise calistirilir.



b.Clone React Repo:
sudo apt-get install git-all -y
> Ilgili repo 
  > Repository Settings 
  > SSH Keys  
  > Public key copy (VM'in /.ssh/authorized_keys yapistir)
  > VM'in IP adresini Host address bloguna yapistir 
  > Fetch
  > Add
sudo chmod 644 authorized_keys 
git clone https://umitceylan11@bitbucket.org/eyvi_project/eyvi-client.git



c.NGINX Configurasyonu Port:
- Burasi eski artik nginx'i yukleyip default olarak bulunan /etc/nginx/sites-available/example.com file'i /etc/nginx/sites-enable/example.com a tasinir. 
- Asagidaki Https konfigurasyonunu asagida kullaniyoruz.
sudo vim /etc/nginx/sites-enabled/tutorial
-------------------------------------------------------------------------------
server {
       listen 81;
       listen [::]:81;

       server_name 87.123.4.56;

       root /var/www/eyvi;
       index index.html;

       location / {
               try_files $uri /index.html;
#               try_files $uri $uri/ =404;
       }
}
-------------------------------------------------------------------------------
  - 80 ve 81 portlari nginx icindir. Ikisinden birini kullanabiliriz.



d.Bulid React Project ve Nginx'in Ilgili Adresine Transferi:
- React'i build etmek icin repoda calistirilir.
- npm, react'in maven'i gibi index.css dosyalarindan compile ederek index.html olusturur.
- Daha sonra build folder olusturur.
npm install
npm run build



e.Application'un 3000 Portunda Calistirilmasi:

e1.Birinci yol:
sudo npm i -g serve
   - repoda
sudo serve -s /home/ubuntu/frontend -n

e2.Ikinci yol:
sudo npm i -g serve
nohup serve -s /home/ubuntu/frontend -n </dev/null >servelog.log 2>&1 &




f.NGINX Configurasyonu index.html:
sudo mkdir /var/www/eyvi
sudo cp -r /home/ubuntu/eyvi-client/build/. /var/www/eyvi
  - npm ile olusturulan build dosyasinin icrerigi buraya aktarilir.
service nginx restart
service nginx stop
service nginx start
  - 80 portu calisiyor.




2.a.NGINX ile 443 PORTU ve SSL CERTIFICATION:

a.OpenSSL ile SSL Certificate:
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt
  - SSL keyi olusturduk.


b.SSL Certificate Conf File:
- Bu eski yol idi. Https'i kurmuyor sadece 443 portunu unsecure aciyor.
vim /etc/nginx/snippets/self-signed.conf
------------------------------------------------------------------------
ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
------------------------------------------------------------------------
  - NGINX'te SSL key ve self-signed'i refere eden bir conf file olusturduk.
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
  - Ikinci bir key olusturduk.
vim /etc/nginx/sites-enabled/client-config
sudo vim /etc/nginx/sites-enabled/eyvi
---------------------------------------------------------------------------
server {
       listen 80;
#       listen [::]:80;
       listen 443; # ssl http2 default_server;

       server_name 16.170.108.70;

       root /var/www/eyvi;
       index index.html;

       location / {
               try_files $uri $uri/ =404;
       }

       listen [::]:443 ssl http2 default_server;
       include /etc/nginx/snippets/self-signed.conf;

}
---------------------------------------------------------------------------
service nginx restart


2.b.HTTPS Konfigurasyonu:
- Once Route53 ile hostname (domainname) register ettik.
- Sonra recordlar olusturduk. Https'e tanitilacak www.eyvi.net ve eyvi.net adreslerine "A" record tanimladik.
- Sonra bu subdomainnamelere letsencrypt'ten SSL certificate alinacak.
- Certifika islemi icin:
  * default olarak bulunan /etc/nginx/sites-available/example.com file'i /etc/nginx/sites-enable/example.com a tasinir.
  * example.com dosyasinin ismi degistirilir ve "server_name"e subdomain ve domainname tanimlanir. 
  * "root"a ilgili compile edilmis veya index.html dosyalarinin adresi tanimlanir.
  * certbot yuklenir ve domain ve subdomainname belirtilerek certbot ile ssl certificate alinir.
  * nginx restart edilir. 
----------------------------------------------------------------
https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal
> get started
> Certbot
> nginx | ubuntu 22
apt-get update

sudo apt install snapd
sudo snap install core
# sudo snap install hello-world
# hello-world

sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
--------------------------------------------------------------
  - Kullanmadik sanirim. Daha sonra asagidan devam ettik.

cd /etc/nginx/sites-available
sudo mv example.com ../sites-enabled/eyvi.net
sudo vim eyvi.net 
---------------------------------------------
server_name eyvi.net www.eyvi.net;

root /var/www/eyvi;
---------------------------------------------
  - bu ikisi degistirildi.
  - Ilgili her iki record'a birer Aname atanmis durumda olmali.
  - Sergilenecek index dosyalarinin adresi.
  - Https konfigurasyonu yapilmaz, 443 konfigurasyonu asagidaki ssl certification alma surecinde otomatik olarak olur.
sudo nginx -t
  - nginx'in konfigurasyonunu kontrol eder.
sudo systemctl reload nginx
sudo systemctl restart nginx
sudo systemctl status nginx
netstat -tlnp
  - Server'da hangi portlarin acik oldugunu gosterir.
sudo apt install certbot python3-certbot-nginx
sudo certbot --nginx -d eyvi.net -d www.eyvi.net
  - SSL certificate olusturuldu. 
netstat -tlnp
cat vim eyvi.net 
sudo systemctl list-unit-files
sudo systemctl list-unit-files | grep node
