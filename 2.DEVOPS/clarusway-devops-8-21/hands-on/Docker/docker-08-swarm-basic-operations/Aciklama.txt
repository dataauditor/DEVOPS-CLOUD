Hands-on:
- docker-08-swarm-basic-operations
- cfn dosyasini cloudformation'dan yukleyerek 5 instance acilir.
- Sirayla instance'lara VSC'dan baglanilir.

1.Manager-Primary:
>ssh -i "ugur.pem" root@ec2-52-91-97-153.compute-1.amazonaws.com
  - connect deyince gelen kodda yazan "root" kullanicisini "ec2-user" olarak degistirerek baglanilir.
  - pem file'in oldugu yerden VSC ile baglanilir.
>docker --version
>sudo hostnamectl set-hostname manager-1
  - bu bilgisayari manager-1 olarak node yaptik.
  - sadece takip kolayligi sagliyor bu komut.
>bash
  - manager-1 user'i olarak bash'te yazar.
>docker info
  - Swarm'in inactive oldugu gorulur.
>docker --help
>docker swarm --help
  - swarm'la ilgili komutlari goruruz.
>docker swarm init --help
  - init ile ilgili komutlar.
  - "--advertise-addr" : bazi bilgisayarlarda birden fazla network karti/ip'si olabilir
>hostname -i
  - ip adresini goruruz.
  - birden fazla ip adresi varsa instance'nin bu attribute ile ip numarasi belirtmeliyiz.
>docker swarm init --advertise-addr 172.31.89.167
  >docker swarm init
    - tek ip'si oldugu icin yukarki komutta yeterli.
  - "init" komutunu calistirdigimiz manager primary olur.
  - Tek node'dan olusan docker swarm cluster'imiz var.
  - Bu komut Docker Swarm/Cluster kurarken tek bir instance'ta kullanilir. 
  - Diger instance'ta kullanirsan bagimsiz ayri bir Docker Swarm kurar.
>docker info 
  - Swarm: active
>docker swarm join-token manager
  - bu clustera manager eklemek icin bana token iceren komut verir.
  - ilgili komutu kopyalayip yapistiririz.

2. Manager:
>ssh -i "ugur.pem" root@ec2-34-239-117-10.compute-1.amazonaws.com
  - 2. instance'a baska bir bash ile baglanilir.
  - "root" user, "ec2-user" ile degistirilir.
>sudo hostnamectl set-hostname manager-2
  - takibi kolay olsun diye isim verdik.
>bash
>docker version
>docker swarm join --tosrken SWMTKN-1-69ytlptltd5o4gue7srjxdc1o1kyz5thl5i736tercrsk56guh975a-e6bhq8yh5jibon  z8lfafcr6kk 172.31.89.167:2377 
  - manager-1'de uretilen komutu buraya girince bu instance'yi de cluster'a baglayip manager yaptik.
  - "docker init" deseydik ayri bir cluster olusturacaktik.
>docker node ls
  - 2 adet manageri hangisinin primary oldugunu gosterir.

3.Manager:
>ssh -i "ugur.pem" root@ec2-35-171-23-46.compute-1.amazonaws.com   
  - root > ec2-user degisecek.
>sudo hostnamectl set-hostname manager-3
>bash
>docker swarm join --token SWMTKN-1-69ytlptltd5o4e7srjxdc1o1kyz5thl5i736tersk56guh975a-e6bhq8yh5jibonz8lfafcr6kk 172.31.89.167:2377
  - Primary manager'dan alinan ayni komutu manager-3'e de yazarak manager yaptik.
  - Primary olmayan managerlara komut yazarsak proxy gorevi gorur ve komutu primary manager'a aktarirlar. Isleri primary manager yapar. 

1.Manager:
>docker node ls
  - yaninda * olan komutu yazdigimiz mevcut manager.
  - Leader yazan primary manager.
>docker swarm join-token worker
  - Primary'den worker instance icin tokenli kod alinir.

1.Worker:
>ssh -i "ugur.pem" ec2-user@ec2-35-172-119-85.compute-1.amazonaws.com      
  - worker-1 instance'a baglandik.
  - root > ec2-user degistir.
>sudo hostnamectl set-hostname worker-1
  - isimlendirdik.
>bash
>docker swarm join --token SWMTKN-1-69ytlptltd5o4e7srjxdc1o1kyz5thl5i736tersk56guh975a-5nef0wqdljeiw671en9jyqp03 172.31.89.167:2377
  >Managerdan "docker swarm join-token worker" kodu ile alinan token kodunu yazarak mevcut nodu worker yaptik.
>docker node ls
  - hata verir cunki workerlardan komut girilemez.

1.Manager:
>docker node ls
  - manager ve worker node'lari gosterir.
>docker swarm join-token worker
  - bu komutu her girdigimizde ayni tokenla komut verir.

2.Worker node:
>ssh -i "ugur.pem" root@ec2-18-205-103-8.compute-1.amazonaws.com
  - root > ec2-user degistir.
>sudo hostnamectl set-hostname worker-2
>bash
>docker swarm join --token SWMTKN-1-69ytlptltd5o4e7srjxdc1o1kyz5thl5i736tersk56guh975a-5nef0wqdljeiw671en9jyqp03 172.31.89.167:2377
  - worker node oldu.

1.Manager:
>docker node ls
  - 3 manager ve 2 worker'i gosterir.
>docker service create \
  --name=viz \
  --publish=8080:8080/tcp \
  --constraint=node.role==manager \
  --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
  dockersamples/visualizer
    - viz isimli conteiner olusturduk.
    - managerda olusturduk.
    - goruntuleme imkani verir.
>docker service ps viz
  - hangi managerde container olustugunu goruruz.
- browserden hangi visualizerin hangi manager'a yuklendi ise o managerin ip addresi:8080 portundan baglaniriz.
  - https > http
>docker service create --name webserver --replicas=5 -p 80:80 nginx
  - docker conteiner run (farki cluster olusturur tek conteiner yerine)
  - "--replicas=5" adet belirtilir. 
  - "-p" ilk instance son container
  - 5 adet conteiner olusur.
- browserden visualisere bakarsak 5 nodda birer conteiner goruruz. 2.sinde viz containeri var fazladan.
>docker service ls
  - service yani cluster'lari (container adetleri ile) gosterir.
  - 2 adet service gosterir: webserver ve viz.
  - Replicas: sol istenen adet/sag mevcut adet
>docker service ps webserver
  - webserver service'indeki container ve bulunduklari node'lari gosterir.

3.Manager:
>docker container ls
  - Mevcut node'taki containeri gorur yalnizca.
>docker rm -f a13
  - Mevcut node'taki container silindi.
>docker container ls
  - bir sure beklenip bu komut yazilirsa swarm'in yeni container calistirdigi gorulur.
- browserden manager-2'ye baglanilirsa 5 container gorulur.
>docker service ps webserver
  - 5 adet container
>docker service inspect webserver
  - "inspect" ilgili service'i inceleriz.
>docker service inspect --pretty webserver
  - "--petty" yaml. formatinda daha okunur gosterir.

AWS Konsol:
- 5 numarali nodu stop ederiz.
- Browserden visualisor'a bakinca 2 numarali node'da bir container daha acmis. 4 node var.
  - Swarm'a bagli bir node cokse bile onun gorevlerini primary manager dagitir ve sistem calismaya devam eder.
  - Istenilen ile current/mevcut container adedini surekli esit tutmaya calisiyor.
- 5 numarali nodu start edince node acilsa bile baska node'a transfer olan container yerinde kalir. 
  - Yeni bir komut girilirse container yeni node'ta acilir.

1.Manager:
>docker service ps webserver
  - 5 container var.
>docker service logs webserver
  - tum service'in log'larina bakariz.
>docker service scale webserver=3
  - container sayisini 3'e azaltir.
>docker service scale webserver=15
  - container sayisini 15 yapar.
  - 3'er 3'er dagitti.
>docker service ls
  - iki service'i gosterir. Birinde tek birinde 15 container var.
>docker service rm webserver
  - webserver cluster/service'ini sildi. 
>docker service create --name glbserver --mode=global -p 80:80 nginx
  - "global" her instanceda bir container calissin istersek kullaniriz.
  - "--mode=replicated" defaultudur. Bos birakilirsa replicated modda calisir.

AWS Konsol:
- Worker-1 stop ettik.
- Icindeki containeri baska node'da olusturulmadi. Global'de her node'da bir container olusturulur.
- Worker-1 start ettik.
- Icinde 1 container acildi.

1.Worker:
>docker container ls
  - 1 container var.
>docker rm -f 70b
  - container silindi.
  - Swarm otomatik olarak ayni nodda global oldugu icin bir container acar.
>docker service rm glbserver
  - service silindi

1.Manager:
>docker service create --name clarusweb -p 80:80 --replicas=10 clarusway/container-info:1.0
>docker service update --detach --update-delay 5s --update-parallelism 2 --image clarusway/container-info:2.0 clarusweb
  - bir onceki komutla actigimiz service'i update ediyoruz.
  - "--update-delay 5s" : arada kopukluk olmasin diye 5sn aralik veriyoruz. Kapatinca yenilerin acilmasi icin 5sn sure ver baska kapatmadan once.
  - "--update-parallelism 2" : 2'ser 2'ser shutdown yapip 2'ser 2'ser yerine olustur.
  - "--image" : kullanilacak yeni imaji belirtir.
  - "clarusweb" imaji degisecek servisi tanimladik.
>>watch docker service ps clarusweb
  - "watch" calistirilan komutun sonucunu gosterir.
  - komutla birlikte anlik degisimleri izlersiniz.
>docker service rollback clarusweb
  - bir onceki image ile eski hale doner.
>docker service rm clarusweb