1.Genel:
- hosts: kimde islem yapacagini gosterir. Belirtmek zorunlu. Inventory ile match etmeli.
- remote-user: root (yuklemeler icin secilebilir.)

ansible-doc yum 
  - komutu ile parametreler gorulur.
- docs.ansible.com'dan parametreler alinir.
- taskler sirayla icra edilir defaultta.
- inventory file /etc/ansible/hosts file'inda saklanir.
- Baska adres olacaksa path'e tanitilir.
- Tasks: asil isi yaparlar. Module'lerden olusur.
- Modules: Task'in altindaki scriptler.
- Handlers: Tetikleyerek calisir. Bir islem yapilinca baska bir islemi yaptiriyor. 
- Variables: dogrudan tanitilabilir veya baska bir file'a yazip adres vererek cekilebilir. Tum dosyada degisken olarak kullanilarak kolaylik saglar. komutta '-e' ile de verilebilir.
- Conditionals: when ile kullanilir. and, or icinde secilebilir.
- Loops: name: '{{ item }}' tanimlanarak. asagiya bir liste ile veriler tanimlanir. bir task icinde benzer tasklari yaptirabiliriz.


Onemli komutlar:
  - ansible node3 -m setup
  - ansible node3 -m setup | grep ansible_distribution_version
  - ansible node2 -m setup | grep ansible_os_family
  - ansible node3 -m gather_facts 
  - ansible node3 -m gather_facts | grep ansible_os_family


2.Hands-on:
- 1 control consol iki linux bir ubuntu makine host ile baglanacak.
- hosts (inventory file) duzenlenir. Privat IP ve pem dosyasi ile user'lar girilir.
- ansible.cfg ile ikazlar vb kaldirilir.

VSC-hosts:
- hosts (inventory file) degistirilecek.
sudo yum update -y
sudo amazon-linux-extras install ansible2
ansible --version
sudo su
cd /etc/ansible
ls
vim hosts
--------------------------------------------
[webservers]
node1 ansible_host=172.31.30.230 ansible_user=ec2-user
node2 ansible_host=172.31.18.254 ansible_user=ec2-user

[ubuntuservers]
node3 ansible_host=172.31.31.237 ansible_user=ubuntu

[all:vars]
ansible_ssh_private_key_file=/home/ec2-user/ugur.pem
--------------------------------------------
  - private ip'leri gir.
  - ugur.pem yaz.

VSC-ansible.cfg:
- ansible.cfg dosyasina bazi izin/kisitlamalar verilecek.
vim /etc/ansible/ansible.cfg
-------------------------------------------------------------
default
interpreter_python=auto_silent
host_key_checking = False
  # uncomment this to disable SSH key host checking
-------------------------------------------------------------
  - ikazlar kaldirildi.
scp -i ~/.ssh/ugur.pem ~/.ssh/ugur.pem ec2-user@33.23.5.123:/home/ec2-user
chmod 400 ugur.pem

VSC-ping:
vim playbook1.yml
-------------------------------------------------------------
- name: Test connectivity
  hosts: all
  tasks:
   - name: Ping test
     ping:
-------------------------------------------------------------
  - ping modulu kullaniliyor.
!!!
ansible-playbook -b playbook1.yml --check
  - '--check': olusturmaz sadece hatalarina bakar ve olusacak resource'lari gosterir.
ansible-playbook -b playbook1.yml

VSC-copy:
echo 'Hello Clarusway' > testfile 
vim playbook2.yaml
-------------------------------------------------------------
- name: copy for linux
  hosts: webservers
  tasks:
    - name: Copy your file to the webserver nodes
      copy: 
        src: /home/ec2-user/testfile
        dest: /home/ec2-user/testfile1
- name: copy for ubuntu
  hosts: ubuntuservers  # node3 de yazilabilirdi.
  tasks: 
     - name: Copy your file to the ubuntu node
       copy:
         src: /home/ec2-user/testfile
         dest: /home/ubuntu/testfile1 
-------------------------------------------------------------
ansible-playbook playbook2.yml
ansible webservers -m copy -a "src=/home/ec2-user/testfile dest=/home/ec2-user/testfile1"
  - yukardaki playbook'un ad-hoc seklinde yazimidir.
  - idenpotency: Daha once icra edilmis islemler komut olarak verilirse degisiklik olmadigini gosterir, yesil doner/dondu. 
vim playbook3.yml
-----------------------------------------------------------------------------
- name: Copy for linux
  hosts: webservers
  become: yes
  tasks:
   - name: Copy your file to the webservers
     copy:
       src: /home/ec2-user/testfile
       dest: /home/ec2-user/testfile1
       mode: u+rw,g-wx,o-rwx
- name: Copy for ubuntu
  hosts: ubuntuservers
  become: yes
  tasks:
   - name: Copy your file to the ubuntuservers
     copy:
       src: /home/ec2-user/testfile
       dest: /home/ubuntu/testfile1
       mode: u+rw,g-wx,o-rwx
- name: Copy for node1
  hosts: node1
  become: yes
  tasks:
   - name: Copy using inline content
     copy:
       content: '# This file was moved to /etc/ansible/testfile2'
       dest: /home/ec2-user/testfile2
   - name: Create a new text file
     shell: "echo Hello World > /home/ec2-user/testfile3"
-----------------------------------------------------------------------------
  - hosts isimleri onemli, inventory file ile uyusmali.
  - copy module ile dosya izinleri, yorum ekleme ve shell module kullanildi.
  - 'become: yes' ekleyerek root yetkisi verdik ansible'a, yoksa calismadi.
  - 'content' uzerine yazar ve onceki veriyi siler.
  - '>' eskisini siler uzerine yazarken, '>>' altina ekler.
sudo ansible-playbook -b playbook3.yml
  - '-b': playbook da 'become:yes' ile root yetkisi verildigi icin kullanilmasina gerek yok.
ansible all -m shell -a "ls -al test* ; cat test*"
!!!
ansible node3 -m setup
  - node'larin tum bilgilerini getirir.
  - conditionals yazarken buradaki bilgilerden yararlanilabilir.
ansible --list-hosts all
  - inventory'de tanimli node'lar
ansible --list-hosts webservers
ansible --list-hosts \!webservers
  - web disindakileri gosterir.

VSC service:
vim playbook4.yaml
------------------------------------------------------------
- name: apache installation for webservers
  hosts: webservers
  tasks:
    - name: install the latest version of apache
      yum:
        name: httpd
        state: latest

    - name: start apache
      shell: "sercice httpd start"

- name: apache installation for ubuntuservers
  hosts: ubuntuservers
  tasks: 
    - name: update the system
      shell: "apt update -y"

    - name: install the latest version of apache
      apt:
        name: apache2
--------------------------------------------------------------------------------
ansible-playbook playbook4.yml

Browser:
ip'lerle bak

VSC-yum-remove:
- yum modulu ile program silme.
vim playbook5.yml
--------------------------------------------------------------------------------
- name: Remove Apache from webservers
  hosts: all
  tasks: 
  - name: Remove Apache
    yum:
      name: httpd
      state: absent
  
- name: Remove Apache from ubuntuservers
  hosts: dbservers
  tasks:
    - name: Remove Apache
      apt: 
        name: httpd
        state: absent
    - name: Remove unwanted Apache2 packages from the system
      apr:
        autoremove: yes
        purge: yes
--------------------------------------------------------------------------------
ansible-playbook -b playbook5.yml

VSC service-loop:
vim playbook6.yaml
---------------------------------------------------------
- name: play 4
  hosts: ubuntuservers
  tasks:
   - name: installing apache
     apt:
       name: apache2
       state: latest

   - name: index.html
     copy:
       content: "<h1>Hello Clarusway</h1>"
       dest: /var/www/html/index.html

   - name: restart apache2
     service:
       name: apache2
       state: restarted
       enabled: yes

- name: play 5
  hosts: webservers
  tasks:
    - name: installing httpd and wget
      yum:
        pkg: "{{ item }}"
        state: present
      loop:
        - httpd
        - wget
---------------------------------------------------------
!!!
  - 'pkg: "{{ item }}"' ile 'loop:' koordinelidir. item loop altina yazilanlari sirayla cekerek indirir.
ansible-playbook -b playbook6.yaml --check
  - kontrol yapar. olusturmaz.
ansible-playbook -b playbook6.yaml 

VSC apt-absent:
ansible-playbook -b playbook6.yaml --list-hosts
!!!
ansible-playbook -b playbook6.yaml --list-tasks
vim playbook7.yaml
-------------------------------------------------------------
- name: play 6
  hosts: ubuntuservers
  tasks:
   - name: Uninstalling Apache
     apt:
       name: apache2
       state: absent
       update_cache: yes
   - name: Remove unwanted Apache2 packages
     apt:
       autoremove: yes
       purge: yes

- name: play 7
  hosts: webservers
  tasks:
   - name: removing apache and wget
     yum:
       pkg: "{{ item }}"
       state: absent
     loop:
       - httpd
       - wget
-------------------------------------------------------------
  - uninstall
ansible-playbook -b playbook7.yaml

VSC user:
vim playbook8.yaml
-------------------------------------------------------------
- name: Create users
  hosts: "*"
  tasks:
    - user:
        name: "{{ item }}"
        state: present
      loop:
        - joe
        - matt
        - james
        - oliver
      when: ansible_os_family == "RedHat"

    - name: kullanici ekle 
      user:
        name: "{{ item }}"
        state: present
      loop:
        - david
        - tyler
      when: ansible_os_family == "SUSE"

    - user:
        name: "{{ item }}"
        state: present
      loop:
        - john
        - aaron
      when: ansible_os_family == "Debian" or ansible_distribution_version == "20.04"
-------------------------------------------------------------
  - mavi renk: sartin saglanamadigini gosterir.
  - sari olusturuldu.
  - yesil: ayni degismedi.
  - "*": all
  - loop ile item'a sirayla gonderilir.
  - 'when': sart
ansible node1:node2:node3 -m gather_facts | grep ansible_os_family
  - os'leri gosterir.
ansible-playbook -b playbook8.yaml
scp -i ec2_key.pem 11.pem ec2-user@107.22.52.5:/home/ec2-user


































