1.Secrets:
- Gizli verileri depolariz.
- Imperative (CLI) ve declerative (.yaml) olarak tanimlanabilir. Her ikisi icin:
  - Imperative:
    - key-value olarak tanimlanabilir.
      - env variable olarak tanimlanir.
    - file/directory'dan alinabilir.
      - volume olarak mount edilir.
      - '--from-file=./username.txt' seklinde yazilirsa file name default olarak key olur. Icerigi de value.
      - '--from-file=username=./username.txt' seklinde yazilirsa arada key verilir, file name'i kullanmaz.
- ConfigMaps'ten farki Base64 kullanir ve type'i vardir.
- tipi var: Opague vb 8 tipi vardir. Imperative yaparken Generic=Opague
- Opaque: tum tipleri buna yazabilirsiniz. Denetim yapmaz. CLI'da 'generic' olarak yazilir.
- Diger tipler konulan verinin formatini denetler (ssh vb)
- Farkli karakterler kullanilacaksa ' ' icine alinir. Sadece literalde kullanilir. Dosya icinde gerek yok.
- secret ile pod ayni ns'de olmali.
- default olarak base64 seklinde yazilir. O sekilde bekler.

ConfigMaps:
- Hertur veri saklanir.
- Posix formati: Key degerleri buyuk harf olmali ve arada cizgi olacaksa alt cizgi kullanilmali.
- Bir cesit volume denebilir.
- Imperative ve declerative olarak tanimlanabilir. Her ikisi icin:
  - key-value olarak tanimlanabilir.
    - env variable olarak tanimlanir.
  - file/directory'dan alinabilir.
    - volume olarak mount edilir.
- ConfigMaps bind configuration files, command-line arguments, environment variables, port numbers, and other configuration artifacts to your Pods' containers and system components at runtime.
- `kubectl create configmap` komutu ile ConfigMaps olusturmanin 3 yolu vardir: 
  - Use the contents of an entire directory with `kubectl create configmap my-config --from-file=./my/dir/path/`
  - Use the contents of a file or specific set of files with `kubectl create configmap my-config --from-file=./my/file.txt`
  - Use literal key-value pairs defined on the command line with `kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2`


2. Hands-on:
- Secrets
- Imperative

VSC:
echo -n 'admin' > ./username.txt
  - "-n" alt satira gecisi engelliyor ve ek bir veri girisine engel oluyor.
echo -n '1f2d1e2e67df' > password.txt
kubectl create secret generic db-user-pass --from-file=username.txt --from-file=./password.txt
  - generic (opaque) tipidir ve CLI'da bu sekilde yazilir.
  - db-user-pass isimli bir secret objesi olusturuldu.
kubectl create secret generic db-user-pass-key --from-file=username=./username.txt --from-file=password=./password.txt
  - key degeri arada verildi.
kubectl get secrets
kubectl describe secrets/db-user-pass
  - value degerlerini expose etmez.



!!!!!!!!!!!
3.Hands-on:
- Secrets
- Declerative
- Secret olusturup bunu pod'a atama.

VSC:
echo -n 'admin' | base64
  - YWRtaW4=
  - .yaml file'a sifre acik yazilmaz. Bu yuzden sifrelenerek yazilir. 
  - .yaml file apply olunca otomatik olarak decode yapar secret verileri.
echo -n '1f2d1e2e67df' | base64
vim secret.yaml
----------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm
----------------------------------------------------------------------
kubectl apply -f ./secret.yaml
kubectl get secret mysecret -o yaml
echo 'MWYyZDFlMmU2N2Rm' | base64 --decode
vim mysecret-pod.yaml
----------------------------------------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: password
  restartPolicy: Never
----------------------------------------------------------------------
  - 'env' altinda secret baglanir.
  - 'name: SECRET_USERNAME' seklinde buyuk harf ve alt cizgi ile yazilmali.
  - 'valueFrom:' ve 'secretKeyRef:' altinda name: secret objesinin adi key ise ilgili secretin key'ini yazariz.
kubectl apply -f mysecret-pod.yaml
kubectl exec -it secret-env-pod -- bash
# echo $SECRET_USERNAME
# echo $SECRET_PASSWORD
# env
  - ilgili verileri sifresiz goruruz.



4.Hands-on:
- ConfigMap
-

VSC:
mkdir k8s ; cd k8s
vim deployment.yaml
------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
  labels:
    app: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
        - name: demo
          image: clarusway/demo:hello
          ports:
          - containerPort: 8888
------------------------------------------------------------------------
vim service.yaml
------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: demo-service
  labels:
    app: demo
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8888
    nodePort: 30001    
  selector:
    app: demo
------------------------------------------------------------------------
  - en alttaki 'selector:' ile podlarin labellarini yakalariz.
cd .. 
kubectl apply -f k8s
kubectl get svc demo-service -o wide
curl < worker-ip >:30001
  - Hello, Clarusway! gosterir.
kubectl delete -f k8s
vim deployment.yaml
-------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
        - name:  demo
          image: clarusway/demo:hello-config-args
          imagePullPolicy: Always
          args:
            - "-greeting"
            - "$(GREETING)"
          ports:
            - containerPort: 8888
          env:
            - name: GREETING
              value: selam 
-------------------------------------------------------------------------
  - Value deploymentte verilir.
  - greeting mesajini bir parametre (env variable) olarak kullanacagiz.
  - Configuration data container'in env variable'sine gonderilir.
kubectl apply -f deployment.yaml  
kubectl apply -f  service.yaml

Browser:
- public ip:30001

VSC:
vim demo-config.yaml
-------------------------------------------------------------------------
apiVersion: v1
data:
  greeting: Halllo
kind: ConfigMap
metadata:
  name: demo-config
-------------------------------------------------------------------------
kubectl apply -f demo-config.yaml
vim deployment.yaml
-------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
        - name:  demo
          image: clarusway/demo:hello-config-args
          imagePullPolicy: Always
          args:
            - "-greeting"
            - "$(GREETING)"
          ports:
            - containerPort: 8888
          env:
            - name: GREETING
              valueFrom:
                configMapKeyRef:
                  name: demo-config
                  key: greeting
-------------------------------------------------------------------------
  - Value demo-config dosyasindan referans verilerek alinir.
kubectl delete configmap/demo-config



5.Hands-on:
- `kubectl create configmap` command ile ConfigMaps olusturmanin 3 yolu vardir: 
  - Dogrudan komutta value verilir.
  - Bir adres verilir.
  - Dogrudan config file ile value verilir.
- Yukarinin devamidir.

VSC:
- Dogrudan kommutta value verme:
kubectl create configmap demo-config --from-literal=greeting=Halo
  - Burada greeting '--from-literal=key2=value2' seklinde dogrudan komut ile verilmis.
kubectl apply -f deployment.yaml  
kubectl apply -f  service.yaml
  - configMaps bu nodlara da uygulanir.
kubectl get svc -o wide
curl < worker-ip >:30001
  - configMaps ile gelen value degeri ile degisen indexi goruruz.
kubectl get cm
kubectl delete cm demo-config 
kubectl delete -f service.yaml
kubectl delete -f deployment.yaml

- Dogrudan config file ile value verme:
echo "greeting: Hei" > config.txt
kubectl create configmap demo-config --from-file=./config.txt
  - 'echo' ile olusturdugumuz config.txt file'dan value'yi ceker.
  - configmap olusturuyoruz.
kubectl get configmap/demo-config -o json
vim deployment.yml
-----------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
        - name:  demo
          image: clarusway/demo:hello-config-file
          ports:
            - containerPort: 8888
          volumeMounts:
          - mountPath: /config/
            name: demo-config-volume
            readOnly: true
      volumes:
      - name: demo-config-volume
        configMap:
          name: demo-config
          items:
          - key: config
            path: demo.yaml
-----------------------------------------------------------------------------------
kubectl apply -f deployment.yaml 
kubectl get po
kubectl apply -f service.yaml 
kubectl get svc -o wide
curl < worker-ip >:30001
kubectl delete cm demo-config 
kubectl delete -f service.yaml
kubectl delete -f deployment.yaml


- congigMap YAML file ile value cekme:
  - config file ile value cekme/config gile olusturma aynidir.
vim configmap.yaml
-----------------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-config
data:
  config: |
    greeting: Buongiorno
-----------------------------------------------------------------------------------
  - deployment.yaml ile service.yaml file'lari onceki ile aynidir.
kubectl apply -f configmap.yaml
kubectl apply -f deployment.yaml 
kubectl apply -f service.yaml 
kubectl get po
kubectl get svc -o wide
curl < worker-ip >:30001
kubectl delete cm demo-config 
kubectl delete -f service.yaml
kubectl delete -f deployment.yaml



6.Hands-on:
- ConfigMaps ile container env variable olarak key-value degerlerini configure edecegiz.
- Yukarinin devamidir.

VSC:
vim configmap.yaml
-----------------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-config
data:
  greeting: Hola
-----------------------------------------------------------------------------------
vim deployment.yaml
-----------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
        - name:  demo
          image: clarusway/demo:hello-config-env
          ports:
            - containerPort: 8888
          env:
            - name: greeting
              valueFrom:
                configMapKeyRef:
                  name: demo-config
                  key: greeting
-----------------------------------------------------------------------------------
cd ..
kubectl apply -f k8s
kubectl get svc
curl < worker-ip >:30001
kubectl delete -f k8s



7.Hands-on:
- POSIX variables consist solely of uppercase letters, digits, and the '_' (underscore) from the characters defined in Portable Character Set and do not begin with a digit.
- POSIX formatinda verince configmap apply edince dogrudan env variable olarak key ve value degerlerini tanitir. 
- deployment.yaml dosyasi apply oluca configmap'i referans verince dogrudan oradaki tum degiskenlere ulasir ve gerkli degerleri alir. 
- Yukarinin devamidir.

VSC:
vim configmap.yaml
-----------------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-config
data:
  GREETING: Merhaba
-----------------------------------------------------------------------------------
vim deployment.yaml
-----------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
        - name:  demo
          image: clarusway/demo:hello-config-env
          ports:
            - containerPort: 8888
          envFrom:
          - configMapRef:
              name: demo-config
-----------------------------------------------------------------------------------
kubectl apply -f k8s
kubectl get svc
curl < worker-ip >:32711
kubectl delete -f k8s



















