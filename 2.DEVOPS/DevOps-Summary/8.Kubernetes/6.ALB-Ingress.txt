.Genel:
- docs.aws.amazon.com dan load balancer deyince komut ve usulleri acikliyor.
- port numarasini load balancer olarak kullanir.
- EKSctl ve kubectl yukleyince ec2'ya control plane gibi calisir.
- Hazir olusturulmus cluster'lari ve bir kismini package haline getirilebilir. Snapshot'ini almak gibi. Daha sonra kullanabilirsiniz. 
- Helm: Kubernetesin package manager'i.
- Nginx'in kendi ingress load balancer'i var. Dun onunla yaptik. Bugun normal LB kuracagiz.



2.Hands-on:
- 3


AWS-Console:
EC2 acilir.

VSC:
sudo yum update -y
sudo yum install git -y
!!!
curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  - helm'i yukler ve calistirir.
helm version --short
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.9/2020-08-04/bin/linux/amd64/kubectl
  - eks ile actiklarimizi yonetmemizi saglar.
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
kubectl version --short --client
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version
ssh-keygen -f ~/.ssh/id_rsa
aws configure
----------------------------------------------------------------
eksctl create cluster \
 --name denemecluster \
 --version 1.18 \
 --region us-east-1 \
 --nodegroup-name my-nodes \
 --node-type t2.medium \
 --nodes 1 \
 --nodes-min 1 \
 --nodes-max 2 \
 --ssh-access \
 --ssh-public-key  ~/.ssh/id_rsa.pub \
 --managed
----------------------------------------------------------------



3.Hands-on:
- 3
- Cluster'a Load Balancer kurma.

VSC:
!!!
curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.2.1/docs/install/iam_policy.json
  - Load balancer icin izinleri belirleyen policy'i olusturuyoruz.
!!!
aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json
!!!
eksctl create iamserviceaccount \
  --cluster=denemecluster \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --attach-policy-arn=arn:aws:iam::145012395309:policy/AWSLoadBalancerControllerIAMPolicy \
  --override-existing-serviceaccounts \
  --approve
    - OIDC (Open ID Connect Provider) yok hatasi veriyor.
    - Altinda calistirilmasi gereken komutu yazar sonuna --approva yazarak gireriz.
!!!
eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=denemecluster --approve
  - OIDC hatasini duzelttik.
  - hatayi duzelttik yukarki komutu tekrar yazariz.
eksctl create iamserviceaccount \
  --cluster=denemecluster \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --attach-policy-arn=arn:aws:iam::145012395309:policy/AWSLoadBalancerControllerIAMPolicy \
  --override-existing-serviceaccounts \
  --approve
kubectl get deployment -n kube-system alb-ingress-controller
  - hata verirse alttaki komut calistirilir.
helm repo add eks https://aws.github.io/eks-charts
  - controller paketini indiriyor.
helm repo update
helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=denemecluster \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller 
    * AWS LB yuklendi.
kubectl get deployment -n kube-system aws-load-balancer-controller
  - kube-system altinda calisir.


VSC-local:
scp -i ~/.ssh/ugur.pem ./k8s/* ec2-user@54.82.9.97:/home/ec2-user/k8s
  - ec2'ya gonderdik

VSC-ec2:
- burayi dinle
vim ingress.yaml
-----------------------------------------------------------------------------------------
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-clarusshop
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    # Health Check Settings
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP 
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    #Important Note:  Need to add health check path annotations in service level if we are planning to use multiple targets in a load balancer    
    #alb.ingress.kubernetes.io/healthcheck-path: /usermgmt/health-status
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
spec:
  rules:
  - http:
      paths:
      - path: /account
        backend:
            serviceName: account-service
            servicePort: 80
      - path: /inventory
        backend:
            serviceName: inventory-service
            servicePort: 80
      - path: /shipping
        backend:
            serviceName: shipping-service
            servicePort: 80
      - path: /
        backend:
          serviceName: storefront-service
          servicePort: 80
---------------------------------------------------------------------------------------
  - otomatik HTTP'den yayin yapar.
kubectl apply -f .
kubectl get ingress
  - ingress adresi verir.

AWS-LB:
- Cluster region'a git.

Browser:
- 80 portu ile ana sayfaya girilir. (clarusshop.com > StoreFrontUI servisine yonlendirir ingress)
- Herbir uzanti ile farkli bir deployment gorulur.
- Ingress adresleme yapar.
- clarusshop.com/accounting > Accounting service 'e yonlendirir ingress.

VSC:
- Route53 baglayip, SSL sertifikasi baglamak icin 
- SSL'i ingress'e tanimlamaliyiz.
kubectl get svc
- Herbir deployment icin birer nodeport olusur.
- 

AWS-AL:
- Health check hatasi veriyor.
  - healthcheck path'i ingress.yaml'da olmadigi icin (sadece biri tanimlanabildigi icin) digerlerini sonradan tanimlariz.
  - ALB'yi subdomaine baglayip sertifika atariz.

VSC:
rm -rf ingress.yaml





























